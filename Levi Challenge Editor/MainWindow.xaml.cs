using System;
using System.Windows;
using System.Windows.Input;
using System.Xml;
using System.IO;
using System.Windows.Controls;

namespace Levi_Challenge_Editor
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        public MainWindow()
        {
            InitializeComponent();
        }

        // Functions used more than once
        #region Functions
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            if (!Directory.Exists(@"Data"))
                Directory.CreateDirectory(@"Data");
            if (!Directory.Exists(@"Data\Ships"))
                Directory.CreateDirectory(@"Data\Ships");

            UpdateList(S_LstBox_Items, @"Data\Ships");
            ManageObjects();
        }

        private void UpdateList(ListBox ListBox, string folder)
        {
            string[] filePaths = Directory.GetFiles(folder, "*.xml");
            S_LstBox_Items.Items.Clear();
            for (int i = 0; i < filePaths.Length; i++)
            {
                ListBox.Items.Add(filePaths[i]);
            }
        }

        private void ManageObjects()
        {
            // Enable or Disable need controls
            if (S_ChkBox_PlayerShip.IsChecked == true)
            {
                ES_TxtBox_Level.IsEnabled = false;
                ES_TxtBox_Points.IsEnabled = false;
                ES_ComBox_AI.IsEnabled = false;

                PS_TxtBox_Cost.IsEnabled = true;
                PS_ComBox_Type.IsEnabled = true;
            }
            else
            {
                ES_TxtBox_Level.IsEnabled = true;
                ES_TxtBox_Points.IsEnabled = true;
                ES_ComBox_AI.IsEnabled = true;

                PS_TxtBox_Cost.IsEnabled = false;
                PS_ComBox_Type.IsEnabled = false;
            }
        }

        private void ClearObjects()
        {
            S_TxtBox_Name.Text = "";
            S_TxtBox_Health.Text = "";
            S_TxtBox_Shield.Text = "";
            S_TxtBox_Speed.Text = "";
            S_ComBox_HardPoints.SelectedIndex = 0;
            S_ComBox_WeaponClass.SelectedIndex = 0;
            S_TxtBox_Armour.Text = "";

            ES_TxtBox_Level.Text = "";
            ES_TxtBox_Points.Text = "";
            ES_ComBox_AI.SelectedIndex = 0;

            PS_TxtBox_Cost.Text = "";
            PS_ComBox_Type.SelectedIndex = 0;
        }

        private void DeleteFile(string filename)
        {
            if (MessageBox.Show("Are you sure you wish to delete this item?", filename, MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
            {
                File.Delete(filename);
            }
        }
        #endregion

        // Ships Code
        #region Ships
        private void S_Btn_Save_Click(object sender, RoutedEventArgs e)
        {
            string header;
            if (S_ChkBox_PlayerShip.IsChecked == true)
                header = "PS_";
            else
                header = "ES_";

            string fileName = SaveDialog(header + S_TxtBox_Name.Text, "Ships");
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Indent = true;

            string isPlayerShip = "false";

            if (S_ChkBox_PlayerShip.IsChecked == true)
                isPlayerShip = "true";
            if (fileName != null)
            {
                // Create and save the XML Document
                XmlWriter writer = XmlWriter.Create(fileName, settings);
                writer.WriteStartDocument();
                writer.WriteComment("This file was generated by Levi Challenge Editor.");
                writer.WriteStartElement("Ship");
                writer.WriteAttributeString("PlayerShip", isPlayerShip);

                // General Stuff
                writer.WriteElementString("Name", S_TxtBox_Name.Text);
                writer.WriteElementString("Health", S_TxtBox_Health.Text);
                writer.WriteElementString("Shield", S_TxtBox_Shield.Text);
                writer.WriteElementString("Speed", S_TxtBox_Speed.Text);
                writer.WriteElementString("HardPoints", S_ComBox_HardPoints.Text);
                writer.WriteElementString("WeaponClass", S_ComBox_WeaponClass.Text);
                writer.WriteElementString("Armour", S_TxtBox_Armour.Text);

                // Player Stuff
                if (isPlayerShip == "true")
                {
                    writer.WriteElementString("Cost", PS_TxtBox_Cost.Text);
                    writer.WriteElementString("Type", PS_ComBox_Type.Text);
                }

                // Enemy Stuff
                else
                {
                    writer.WriteElementString("Level", ES_TxtBox_Level.Text);
                    writer.WriteElementString("Points", ES_TxtBox_Points.Text);
                    writer.WriteElementString("AI", ES_ComBox_AI.Text);
                }

                writer.WriteEndElement();
                writer.WriteEndDocument();
                writer.Flush();
                writer.Close();
            }

            UpdateList(S_LstBox_Items, @"Data\Ships");
        }

        private string SaveDialog(string filename, string folder)
        {
            Microsoft.Win32.SaveFileDialog dlg = new Microsoft.Win32.SaveFileDialog();
            dlg.FileName = filename; // Default file name
            dlg.DefaultExt = ".xml"; // Default file extension
            dlg.Filter = "XML documents (.xml)|*.xml"; // Filter files by extension
            string mypath = Directory.GetCurrentDirectory();
            dlg.InitialDirectory = mypath + @"\Data\" + folder;

            // Show save file dialog box
            Nullable<bool> result = dlg.ShowDialog();

            // Process save file dialog box results
            if (result == true)
            {
                // Save document
                filename = dlg.FileName;
            }
            else
                filename = null;
            return filename;
        }

        private void S_Btn_New_Click(object sender, RoutedEventArgs e)
        {
            ClearObjects();
            ManageObjects();
        }

        private void S_Btn_Delete_Click(object sender, RoutedEventArgs e)
        {
            DeleteFile((string)S_LstBox_Items.SelectedItem);
            UpdateList(S_LstBox_Items, @"Data\Ships");
        }

        private void S_LstBox_Items_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            ClearObjects();
            string fileName = (string)S_LstBox_Items.SelectedItem;

            // Load the XML Document
            XmlReader reader = XmlReader.Create(fileName);

            bool Correct_File = false;
            while (reader.Read())
            {
                if ((reader.NodeType == XmlNodeType.Element) && reader.Name == "Ship")
                {
                    if (reader.GetAttribute(0) == "true")
                        S_ChkBox_PlayerShip.IsChecked = true;
                    else
                        S_ChkBox_PlayerShip.IsChecked = false;
                    Correct_File = true;
                }

                if (Correct_File == true)
                {
                    while (reader.NodeType != XmlNodeType.EndElement)
                    {
                        reader.Read();

                        // General Stuff
                        switch (reader.Name)
                        {
                            case "Name":
                                S_TxtBox_Name.Text = reader.ReadString();
                                break;
                            case "Health":
                                S_TxtBox_Health.Text = reader.ReadString();
                                break;
                            case "Shield":
                                S_TxtBox_Shield.Text = reader.ReadString();
                                break;
                            case "Speed":
                                S_TxtBox_Speed.Text = reader.ReadString();
                                break;
                            case "HardPoints":
                                S_ComBox_HardPoints.Text = reader.ReadString();
                                break;
                            case "WeaponClass":
                                S_ComBox_WeaponClass.Text = reader.ReadString();
                                break;
                            case "Armour":
                                S_TxtBox_Armour.Text = reader.ReadString();
                                break;
                        }

                        // Player Stuff
                        if (S_ChkBox_PlayerShip.IsChecked == true)
                        {
                            switch (reader.Name)
                            {
                                case "Cost":
                                    PS_TxtBox_Cost.Text = reader.ReadString();
                                    break;
                                case "Type":
                                    PS_ComBox_Type.Text = reader.ReadString();
                                    break;
                            }
                        }

                        // Enemy Stuff
                        else
                        {
                            switch (reader.Name)
                            {
                                case "Level":
                                    ES_TxtBox_Level.Text = reader.ReadString();
                                    break;
                                case "Points":
                                    ES_TxtBox_Points.Text = reader.ReadString();
                                    break;
                                case "AI":
                                    ES_ComBox_AI.Text = reader.ReadString();
                                    break;
                            }
                        }
                    }
                }
            }
            reader.Close();

            if (Correct_File == false)
            {
                MessageBox.Show("Incompatible XML File", fileName, MessageBoxButton.OK, MessageBoxImage.Error);
            }
            ManageObjects();
        }

        private void S_ChkBox_PlayerShip_Click(object sender, RoutedEventArgs e)
        {
            ManageObjects();
        }
        #endregion
    }
}